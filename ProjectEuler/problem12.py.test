#!/usr/bin/env python

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

triangle = [1]

primes = []

from math import sqrt

def get_primes(n):
    global primes
    if n < 2:
        return
    for i in range(1,n):
        if i in primes:
            pass
        else:
            is_prime = True
            for j in range(2,int(sqrt(i))):
                if i%j == 0:
                    is_prime = False
                    break
            if is_prime:
                primes.append(i)

def get_divisors(n):
    tmp = n
    divs = [n]
    global primes
    for d in primes:
        while n%d == 0:
            divs.append(d)
            n //= d
        d += 1
    if n != 1:
        get_primes(tmp)
        return get_divisors(tmp)

    # get nomber of occurrences of each values
    # 28 = 2×2 + 1×7
    # does mean 6 divisors (= 2×3)
    # FIXME
    nb = 0
    while len(divs) != 0:
        current = divs.pop()
        nb += divs.count(current) + 1
        while True:
            try:
                divs.remove(current)
            except ValueError:
                break
    return nb

while get_divisors(triangle[-1]) < 500:
    triangle.append(triangle[-1] + len(triangle) + 1)

print(triangle[-1])
